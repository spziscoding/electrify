{%- comment %}
  @param cart (cart, mandatory)
  @param checkout_url (string, mandatory) the checkout url
  @param checkout_button_selector (string) the query selector for the checkout button
{% endcomment -%}
  
{% unless checkout_url %}
  {% assign checkout_url = settings.external_checkout_link %}
{% endunless %}

{% unless checkout_button_selector %}
  {% assign checkout_button_selector = '[name="externalcheckout"]' %}
{% endunless %}

<script>
        
  document.addEventListener("DOMContentLoaded", function () {

    var debug = true ? console.log.bind(console, '[DEBUG][RedirectCart]') : function () {};

    debug('Script loaded');

    window.RedirectCart = function (options) {


      var self = {};


     function productIdsWithQuantities() {
        {%- assign added_first = false -%}
        return {
          {%- for item in cart.items -%}
            {%- if item.variant.metafields.productId.productId -%}
          {%- if added_first %},{% endif -%}
           {%- if item.selling_plan_allocation -%}
          "{{ item.variant.metafields.productId.productId}}{{"|"}}{{item.selling_plan_allocation.selling_plan.name}}": {{ item.quantity | json }}
          {%- else -%}
           "{{ item.variant.metafields.productId.productId }}": {{ item.quantity | json }}
          {% endif -%}
              {%- assign added_first = true -%}
          {%- endif -%}
          {%- endfor -%}
        };
      }

      function init() {
        self.options = Object.assign({
          products: productIdsWithQuantities(),
          checkoutButtonSelector: '{{ checkout_button_selector }}',
          checkoutUrl: '{{ checkout_url }}',
        }, options);

        self.$checkoutButton = $(self.options.checkoutButtonSelector);

        debug('Initialized with options', self.options);
        
        inject();
      }


      function inject() {
        debug('Inject');
        self.$checkoutButton.on('click', checkout);
      }


      function checkout(event) {
        var checkoutUrl = getCheckoutURL(self.options.products);
        debug('Checkout ->', checkoutUrl);
        event.preventDefault();
        window.location.href = checkoutUrl;
      }
      
      function getCartCookie(name) {
       var match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
        if (match){ 
          return match[2];
          }
 	  }

      function getCheckoutURL(products) {
         cookie = getCartCookie('cart');
        var urlLineItems = Object.keys(products).reduce(function (output, productId) {
          var quantity = products[productId];
          return output.concat([ productId + ':' + quantity ]);
        }, []).join(';');

    	var urlParametersCurrency = new URLSearchParams(window.location.search);
    	checkout_currency = urlParametersCurrency.get('currency');

        return self.options.checkoutUrl + '?products=' + urlLineItems + '&cartId=' + cookie + '&currency=' + checkout_currency;
      }

      init();
      return self;

    };

    var instance = new RedirectCart();

  });

</script>